{"noir_version":"1.0.0-beta.12+9a5b3695b42e391fa27c48e87b9bbb07523d664d","hash":"2272167465821811693","abi":{"parameters":[{"name":"root","type":{"kind":"field"},"visibility":"public"},{"name":"nullifier_hash","type":{"kind":"field"},"visibility":"public"},{"name":"recipient","type":{"kind":"field"},"visibility":"public"},{"name":"nullifier","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"merkle_proof","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"},{"name":"isValid","type":{"kind":"array","length":20,"type":{"kind":"boolean"}},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"pdfNjuIwDAfwd+mZQ+18OOFVVitUoIwqVQV1YKQVmnffFP4uwyEVQ042dPxTktodeq327fbysemGw/GzWv+5Vtux6/vuY9Mfd825Ow7p2+v3qtKPm/PYtumr6sf1VHVqxnY4V+vh0ver6qvpL7c/+jw1wy2emzFdrVdVO+xTTOCh69sp+149qut8qakZxcbxXO6e62mh3mm9Jf+oD0/1nK9nDhEAp7XkBJMXiLwugSi4d9Yg5HUNYuqc4BbWIGJ0DRKzu/B5IVoHIKai39dTzfMp1N69s4dY652gyNk9LPVS1D1YI9leqgubiRa6kX3QWWAfTZZYaAYyj2MwnL0VZArv5eI5xDCfg3vrHF7raPLFLU1S3JOLqyhuSivaES7flLwAsJkfUDY+AHodkBkI8g5gROa5MlnAlD6kbfFTml35Y9oWdzVLcVdzKJzuJeDFsVjcRvFY+Pn/vrcmNxZL9U570kt4qv+bPjW7bnz6pVNxXa3TmTDdA9+DSeufokV00w+SFD2iIAbEeI+mRiRERjSIFhGegWfgGXgGnoVn4Vl4Fp6FZ+FZeBaehWfhOXgOnoPn4Dl4Dp6D5+A5eA6eh+fheXgenofn4Xl4Hp6H5+EJPIEn8ASewBN4Ak/gCTyBF+AFeAFegBfgBXgBXoAX4AV4EV6EF+FFeBFehBfhRXgRXoRHda0JacKaGE2sJk4Tr4loEjRRmVQmlUllUplUJpVJZVKZVCaVWWVWmVVmlVnl2+TwlEzyNNBfzdg1277Fe8bhMux+vHac/530ir6YnMbjrt1fxnYa3Nu1NMr/AQ==","file_map":{"50":{"source":"use poseidon::poseidon2;\nmod merkle_tree;\n\nfn main(\n    // Public Inputs\n    root: pub Field,\n    nullifier_hash: pub Field,\n    recipient: pub Field,\n    // Private Inputs\n    nullifier: Field,\n    secret: Field,\n    merkle_proof: [Field; 20],\n    isValid: [bool; 20],\n) {\n    let commitment: Field = poseidon2::Poseidon2::hash([nullifier, secret], 2);\n    let computed_nullifier_hash: Field = poseidon2::Poseidon2::hash([nullifier], 1);\n    let computed_root: Field = merkle_tree::compute_merkle_root(commitment, merkle_proof, isValid);\n    let recipient_binding = recipient * recipient;\n\n    assert(computed_nullifier_hash == nullifier_hash);\n    assert(computed_root == root);\n    assert(recipient_binding == recipient * recipient);\n}\n","path":"/home/othnapcalx/Documents/Noir/Zk_mixer/circuits/src/main.nr"},"51":{"source":"use poseidon::poseidon2;\n\npub fn compute_merkle_root(leaf: Field, proof: [Field; 20], is_even: [bool; 20]) -> Field {\n    let mut current_hash: Field = leaf;\n\n    for i in 0..20 {\n        let (left_input, right_input): (Field, Field) = if is_even[i] {\n            (current_hash, proof[i])\n        } else {\n            (proof[i], current_hash)\n        };\n        current_hash = poseidon2::Poseidon2::hash([left_input, right_input], 2);\n    }\n    current_hash\n}\n","path":"/home/othnapcalx/Documents/Noir/Zk_mixer/circuits/src/merkle_tree.nr"},"58":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/home/othnapcalx/nargo/github.com/noir-lang/poseidon/v0.1.0/src/poseidon2.nr"}},"names":["main"],"brillig_names":[]}